#BlueJ class context
comment0.target=CheckmateDetector
comment0.text=\r\n\ Component\ of\ the\ Chess\ game\ that\ detects\ check\ mates\ in\ the\ game.\r\n\ \r\n\ @author\ Jussi\ Lundstedt\r\n\r\n
comment1.params=b\ wPieces\ bPieces\ wk\ bk
comment1.target=CheckmateDetector(Board,\ java.util.LinkedList,\ java.util.LinkedList,\ King,\ King)
comment1.text=\r\n\ Constructs\ a\ new\ instance\ of\ CheckmateDetector\ on\ a\ given\ board.\ By\r\n\ convention\ should\ be\ called\ when\ the\ board\ is\ in\ its\ initial\ state.\r\n\ \r\n\ @param\ b\ The\ board\ which\ the\ detector\ monitors\r\n\ @param\ wPieces\ White\ pieces\ on\ the\ board.\r\n\ @param\ bPieces\ Black\ pieces\ on\ the\ board.\r\n\ @param\ wk\ Piece\ object\ representing\ the\ white\ king\r\n\ @param\ bk\ Piece\ object\ representing\ the\ black\ king\r\n
comment10.params=b
comment10.target=java.util.List\ getAllowableSquares(boolean)
comment10.text=\r\n\ Method\ to\ get\ a\ list\ of\ allowable\ squares\ that\ the\ player\ can\ move.\r\n\ Defaults\ to\ all\ squares,\ but\ limits\ available\ squares\ if\ player\ is\ in\r\n\ check.\r\n\ @param\ b\ boolean\ representing\ whether\ it's\ white\ player's\ turn\ (if\ yes,\r\n\ true)\r\n\ @return\ List\ of\ squares\ that\ the\ player\ can\ move\ into.\r\n
comment11.params=p\ sq
comment11.target=boolean\ testMove(Piece,\ Square)
comment11.text=\r\n\ Tests\ a\ move\ a\ player\ is\ about\ to\ make\ to\ prevent\ making\ an\ illegal\ move\r\n\ that\ puts\ the\ player\ in\ check.\r\n\ @param\ p\ Piece\ moved\r\n\ @param\ sq\ Square\ to\ which\ p\ is\ about\ to\ move\r\n\ @return\ false\ if\ move\ would\ cause\ a\ check\r\n
comment2.params=
comment2.target=void\ update()
comment2.text=\r\n\ Updates\ the\ object\ with\ the\ current\ situation\ of\ the\ game.\r\n
comment3.params=
comment3.target=boolean\ blackInCheck()
comment3.text=\r\n\ Checks\ if\ the\ black\ king\ is\ threatened\r\n\ @return\ boolean\ representing\ whether\ the\ black\ king\ is\ in\ check.\r\n
comment4.params=
comment4.target=boolean\ whiteInCheck()
comment4.text=\r\n\ Checks\ if\ the\ white\ king\ is\ threatened\r\n\ @return\ boolean\ representing\ whether\ the\ white\ king\ is\ in\ check.\r\n
comment5.params=
comment5.target=boolean\ blackCheckMated()
comment5.text=\r\n\ Checks\ whether\ black\ is\ in\ checkmate.\r\n\ @return\ boolean\ representing\ if\ black\ player\ is\ checkmated.\r\n
comment6.params=
comment6.target=boolean\ whiteCheckMated()
comment6.text=\r\n\ Checks\ whether\ white\ is\ in\ checkmate.\r\n\ @return\ boolean\ representing\ if\ white\ player\ is\ checkmated.\r\n
comment7.params=tMoves\ tKing
comment7.target=boolean\ canEvade(java.util.Map,\ King)
comment7.text=\r\n\ Helper\ method\ to\ determine\ if\ the\ king\ can\ evade\ the\ check.\r\n\ Gives\ a\ false\ positive\ if\ the\ king\ can\ capture\ the\ checking\ piece.\r\n
comment8.params=poss\ threats\ k
comment8.target=boolean\ canCapture(java.util.Map,\ java.util.List,\ King)
comment8.text=\r\n\ Helper\ method\ to\ determine\ if\ the\ threatening\ piece\ can\ be\ captured.\r\n
comment9.params=threats\ blockMoves\ k
comment9.target=boolean\ canBlock(java.util.List,\ java.util.Map,\ King)
comment9.text=\r\n\ Helper\ method\ to\ determine\ if\ check\ can\ be\ blocked\ by\ a\ piece.\r\n
numComments=12
